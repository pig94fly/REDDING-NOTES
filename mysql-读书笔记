一、存储引擎
    1、最常用的存储引擎：myisam、innodb，前者存储速度更快，后者提供了提交、回滚和崩溃修复能力的事务安全，但会占用更多磁盘空间。
        MyISAM:默认的 MySQL 插件式存储引擎,它是在 Web、数据仓储和其他应用环境下最常使用的存储引擎之一;
	InnoDB:用于事务处理应用程序,具有众多特性,包括 ACID 事务支持;
	Memory:将所有数据保存在 RAM 中,在需要快速查找引用和其他类似数据的环境下,可提供极快的访问;
	Merge:允许 MySQL DBA 或开发人员将一系列等同的 MyISAM 表以逻辑方式组合在一起,并作为 1 个对象引用它们。对于诸如数据仓储等 VLDB环境十分适合。

二、数据类型
（一）根据引擎不同进行设计
    1. MyISAM 数据存储引擎和数据列MyISAM数据表,最好使用固定长度的数据列代替可变长度的数据列。
    2. MEMORY存储引擎和数据列MEMORY数据表目前都使用固定长度的数据行存储,因此无论使用CHAR或VARCHAR列都没
有关系。两者都是作为CHAR类型处理的。
    3. InnoDB 存储引擎和数据列建议使用 VARCHAR类型对于InnoDB数据表,内部的行存储格式没有区分固定长度和可变长度列(所有数据行都使用指向数据列值的头指针),因此在本质上,使用固定长度的 CHAR列不一定比使用可变长度ARCHAR列简单。因而,主要的性能因素是数据行使用的存储总量。由于CHAR平均占用的空间多于VARCHAR,因此使用VARCHAR来最小化需要处理的数据行的存储总量和磁盘I/O是比较好的。
（二）注意varchar与char的区别
    varchar为可变长度数据，char为定长数据，一般来说，定长数据查找更为快速
（三）注意text与blod格式
    这两种数据在删除后会产生“空洞”，为提高性能，要定期使用OPTIMIZE TABLE 功能进行碎片整理。
    避免大量检索blob或text值。可以把blob与text值分开单表存放，以值的MD5()函数SHA1(),CRC32()函数生成程序逻辑来计算散列值。
（四）浮点数与定点数精度问题
    注意：浮点数优点是长度一定的情况下，能够更大的表示数据范围，缺点是会引起精度问题。
    在今后关于浮点数和定点数的应用中,大家要记住以下几点:
	1、浮点数存在误差问题;
	2、对货币等对精度敏感的数据,应该用定点数表示或存储;
	3、编程中,如果用到浮点数,要特别注意误差问题,并尽量避免做浮点数比较;
	4、要注意浮点数中一些特殊值的处理。
